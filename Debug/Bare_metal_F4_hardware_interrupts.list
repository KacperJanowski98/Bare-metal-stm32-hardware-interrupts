
Bare_metal_F4_hardware_interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000454  0800045c  0001045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000454  08000454  0001045c  2**0
                  CONTENTS
  4 .ARM          00000000  08000454  08000454  0001045c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000454  0800045c  0001045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000454  08000454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800045c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800045c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a3a  00000000  00000000  0001048c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a5  00000000  00000000  00010ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00011070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000040  00000000  00000000  000110c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018139  00000000  00000000  00011108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000578  00000000  00000000  00029241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008813c  00000000  00000000  000297b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b18f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  000b1948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800043c 	.word	0x0800043c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800043c 	.word	0x0800043c

080001e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db0b      	blt.n	8000212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	f003 021f 	and.w	r2, r3, #31
 8000200:	4907      	ldr	r1, [pc, #28]	; (8000220 <__NVIC_EnableIRQ+0x38>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	095b      	lsrs	r3, r3, #5
 8000208:	2001      	movs	r0, #1
 800020a:	fa00 f202 	lsl.w	r2, r0, r2
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100

08000224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000234:	2b00      	cmp	r3, #0
 8000236:	db0a      	blt.n	800024e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2da      	uxtb	r2, r3
 800023c:	490c      	ldr	r1, [pc, #48]	; (8000270 <__NVIC_SetPriority+0x4c>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	0112      	lsls	r2, r2, #4
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	440b      	add	r3, r1
 8000248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800024c:	e00a      	b.n	8000264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4908      	ldr	r1, [pc, #32]	; (8000274 <__NVIC_SetPriority+0x50>)
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	f003 030f 	and.w	r3, r3, #15
 800025a:	3b04      	subs	r3, #4
 800025c:	0112      	lsls	r2, r2, #4
 800025e:	b2d2      	uxtb	r2, r2
 8000260:	440b      	add	r3, r1
 8000262:	761a      	strb	r2, [r3, #24]
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr
 8000270:	e000e100 	.word	0xe000e100
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <main>:

#include <stdint.h>
#include "man.h"

int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	// Enable the GPIOB peripheral
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800027c:	4b42      	ldr	r3, [pc, #264]	; (8000388 <main+0x110>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4a41      	ldr	r2, [pc, #260]	; (8000388 <main+0x110>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	6313      	str	r3, [r2, #48]	; 0x30
	// Enable the GPIOD peripheral
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000288:	4b3f      	ldr	r3, [pc, #252]	; (8000388 <main+0x110>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028c:	4a3e      	ldr	r2, [pc, #248]	; (8000388 <main+0x110>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6313      	str	r3, [r2, #48]	; 0x30
	// Enable the SYSCFG peripheral
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000294:	4b3c      	ldr	r3, [pc, #240]	; (8000388 <main+0x110>)
 8000296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000298:	4a3b      	ldr	r2, [pc, #236]	; (8000388 <main+0x110>)
 800029a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800029e:	6453      	str	r3, [r2, #68]	; 0x44
	// Initialize the GPIO pins.
	// PB1 -> input mode with pull_up
	GPIOB->MODER &= ~(0x3 << (BUTTON_PIN*2));	// input mode
 80002a0:	4b3a      	ldr	r3, [pc, #232]	; (800038c <main+0x114>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a39      	ldr	r2, [pc, #228]	; (800038c <main+0x114>)
 80002a6:	f023 030c 	bic.w	r3, r3, #12
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~(0x3 << (BUTTON_PIN*2));
 80002ac:	4b37      	ldr	r3, [pc, #220]	; (800038c <main+0x114>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a36      	ldr	r2, [pc, #216]	; (800038c <main+0x114>)
 80002b2:	f023 030c 	bic.w	r3, r3, #12
 80002b6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x1 << (BUTTON_PIN*2));	// Pull-up
 80002b8:	4b34      	ldr	r3, [pc, #208]	; (800038c <main+0x114>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	4a33      	ldr	r2, [pc, #204]	; (800038c <main+0x114>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	60d3      	str	r3, [r2, #12]
	GPIOB->MODER &= ~(0x3 << (ROTARY_PIN*2));	// input mode
 80002c4:	4b31      	ldr	r3, [pc, #196]	; (800038c <main+0x114>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a30      	ldr	r2, [pc, #192]	; (800038c <main+0x114>)
 80002ca:	f023 0303 	bic.w	r3, r3, #3
 80002ce:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR &= ~(0x3 << (ROTARY_PIN*2));
 80002d0:	4b2e      	ldr	r3, [pc, #184]	; (800038c <main+0x114>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4a2d      	ldr	r2, [pc, #180]	; (800038c <main+0x114>)
 80002d6:	f023 0303 	bic.w	r3, r3, #3
 80002da:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (0x1 << (ROTARY_PIN*2));	// Pull-up
 80002dc:	4b2b      	ldr	r3, [pc, #172]	; (800038c <main+0x114>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a2a      	ldr	r2, [pc, #168]	; (800038c <main+0x114>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	60d3      	str	r3, [r2, #12]
	// PD12 is connected to LED
	// Set to push-pull low-speed output
	GPIOD->MODER &= ~(0x3 << (LED_PIN*2));		// Clear bits
 80002e8:	4b29      	ldr	r3, [pc, #164]	; (8000390 <main+0x118>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a28      	ldr	r2, [pc, #160]	; (8000390 <main+0x118>)
 80002ee:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002f2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (0x1 << (LED_PIN*2));		// output mode
 80002f4:	4b26      	ldr	r3, [pc, #152]	; (8000390 <main+0x118>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a25      	ldr	r2, [pc, #148]	; (8000390 <main+0x118>)
 80002fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002fe:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER &= ~(0x1 << LED_PIN);			// push-pull
 8000300:	4b23      	ldr	r3, [pc, #140]	; (8000390 <main+0x118>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a22      	ldr	r2, [pc, #136]	; (8000390 <main+0x118>)
 8000306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800030a:	6053      	str	r3, [r2, #4]
	GPIOD->PUPDR &= ~(0x3 << (LED_PIN*2));		// no pull-up, pull-down
 800030c:	4b20      	ldr	r3, [pc, #128]	; (8000390 <main+0x118>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	4a1f      	ldr	r2, [pc, #124]	; (8000390 <main+0x118>)
 8000312:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000316:	60d3      	str	r3, [r2, #12]

	// Set SYSCFG to connect the button EXIT line to GPIOB
	SYSCFG->EXTICR[BUTTON_PIN/4] &= ~(0xF << (BUTTON_PIN % 4) * 4);		// Clear
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <main+0x11c>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a1d      	ldr	r2, [pc, #116]	; (8000394 <main+0x11c>)
 800031e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000322:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[BUTTON_PIN/4] |= (0x1 << (BUTTON_PIN % 4) * 4);		// Set
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <main+0x11c>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a1a      	ldr	r2, [pc, #104]	; (8000394 <main+0x11c>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6093      	str	r3, [r2, #8]

	// Setup EXTI interrupts for falling input on the button pin
	EXTI->IMR |= (1 << BUTTON_PIN);
 8000330:	4b19      	ldr	r3, [pc, #100]	; (8000398 <main+0x120>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a18      	ldr	r2, [pc, #96]	; (8000398 <main+0x120>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6013      	str	r3, [r2, #0]
	// Disable the 'rising edge' trigger (button release)
	EXTI->RTSR &= ~(1 << BUTTON_PIN);
 800033c:	4b16      	ldr	r3, [pc, #88]	; (8000398 <main+0x120>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4a15      	ldr	r2, [pc, #84]	; (8000398 <main+0x120>)
 8000342:	f023 0302 	bic.w	r3, r3, #2
 8000346:	6093      	str	r3, [r2, #8]
	// Enable the 'falling edge' trigger (button press)
	EXTI->FTSR |= (1 << BUTTON_PIN);
 8000348:	4b13      	ldr	r3, [pc, #76]	; (8000398 <main+0x120>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	4a12      	ldr	r2, [pc, #72]	; (8000398 <main+0x120>)
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	60d3      	str	r3, [r2, #12]
	// Enable the NVIC interrupt at  minimum priority
	NVIC_SetPriority(EXTI0_IRQn, 0x03);
 8000354:	2103      	movs	r1, #3
 8000356:	2006      	movs	r0, #6
 8000358:	f7ff ff64 	bl	8000224 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 800035c:	2006      	movs	r0, #6
 800035e:	f7ff ff43 	bl	80001e8 <__NVIC_EnableIRQ>

	while (1) {
		if(led_on) {
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <main+0x124>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2b00      	cmp	r3, #0
 800036a:	d006      	beq.n	800037a <main+0x102>
			GPIOD->ODR |= (1 << LED_PIN);
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <main+0x118>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a07      	ldr	r2, [pc, #28]	; (8000390 <main+0x118>)
 8000372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000376:	6153      	str	r3, [r2, #20]
 8000378:	e7f3      	b.n	8000362 <main+0xea>
		} else {
			GPIOD->ODR &= ~(1 << LED_PIN);
 800037a:	4b05      	ldr	r3, [pc, #20]	; (8000390 <main+0x118>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a04      	ldr	r2, [pc, #16]	; (8000390 <main+0x118>)
 8000380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000384:	6153      	str	r3, [r2, #20]
		if(led_on) {
 8000386:	e7ec      	b.n	8000362 <main+0xea>
 8000388:	40023800 	.word	0x40023800
 800038c:	40020400 	.word	0x40020400
 8000390:	40020c00 	.word	0x40020c00
 8000394:	40013800 	.word	0x40013800
 8000398:	40013c00 	.word	0x40013c00
 800039c:	2000001c 	.word	0x2000001c

080003a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a8:	480c      	ldr	r0, [pc, #48]	; (80003dc <LoopForever+0x6>)
  ldr r1, =_edata
 80003aa:	490d      	ldr	r1, [pc, #52]	; (80003e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ac:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <LoopForever+0xe>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b0:	e002      	b.n	80003b8 <LoopCopyDataInit>

080003b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b6:	3304      	adds	r3, #4

080003b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003bc:	d3f9      	bcc.n	80003b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c0:	4c0a      	ldr	r4, [pc, #40]	; (80003ec <LoopForever+0x16>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c4:	e001      	b.n	80003ca <LoopFillZerobss>

080003c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c8:	3204      	adds	r2, #4

080003ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003cc:	d3fb      	bcc.n	80003c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ce:	f000 f811 	bl	80003f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d2:	f7ff ff51 	bl	8000278 <main>

080003d6 <LoopForever>:

LoopForever:
    b LoopForever
 80003d6:	e7fe      	b.n	80003d6 <LoopForever>
  ldr   r0, =_estack
 80003d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e4:	0800045c 	.word	0x0800045c
  ldr r2, =_sbss
 80003e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ec:	20000020 	.word	0x20000020

080003f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC_IRQHandler>
	...

080003f4 <__libc_init_array>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	4d0d      	ldr	r5, [pc, #52]	; (800042c <__libc_init_array+0x38>)
 80003f8:	4c0d      	ldr	r4, [pc, #52]	; (8000430 <__libc_init_array+0x3c>)
 80003fa:	1b64      	subs	r4, r4, r5
 80003fc:	10a4      	asrs	r4, r4, #2
 80003fe:	2600      	movs	r6, #0
 8000400:	42a6      	cmp	r6, r4
 8000402:	d109      	bne.n	8000418 <__libc_init_array+0x24>
 8000404:	4d0b      	ldr	r5, [pc, #44]	; (8000434 <__libc_init_array+0x40>)
 8000406:	4c0c      	ldr	r4, [pc, #48]	; (8000438 <__libc_init_array+0x44>)
 8000408:	f000 f818 	bl	800043c <_init>
 800040c:	1b64      	subs	r4, r4, r5
 800040e:	10a4      	asrs	r4, r4, #2
 8000410:	2600      	movs	r6, #0
 8000412:	42a6      	cmp	r6, r4
 8000414:	d105      	bne.n	8000422 <__libc_init_array+0x2e>
 8000416:	bd70      	pop	{r4, r5, r6, pc}
 8000418:	f855 3b04 	ldr.w	r3, [r5], #4
 800041c:	4798      	blx	r3
 800041e:	3601      	adds	r6, #1
 8000420:	e7ee      	b.n	8000400 <__libc_init_array+0xc>
 8000422:	f855 3b04 	ldr.w	r3, [r5], #4
 8000426:	4798      	blx	r3
 8000428:	3601      	adds	r6, #1
 800042a:	e7f2      	b.n	8000412 <__libc_init_array+0x1e>
 800042c:	08000454 	.word	0x08000454
 8000430:	08000454 	.word	0x08000454
 8000434:	08000454 	.word	0x08000454
 8000438:	08000458 	.word	0x08000458

0800043c <_init>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr

08000448 <_fini>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr
